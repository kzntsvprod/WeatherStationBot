import dotenv from 'dotenv';

dotenv.config();

// –ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ (–ø–æ—Ç–æ—á–Ω–∞)
export const getTodayWeather = async (city) => {
    const apiKey = process.env.OPENWEATHER_API_KEY;
    const url = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(
        city
    )}&appid=${apiKey}&units=metric&lang=ua`;

    const response = await fetch(url);
    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –ø–æ–≥–æ–¥–∏");
    }
    const data = await response.json();

    return `üå§ –ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —É –º—ñ—Å—Ç—ñ ${data.name}, ${data.sys.country}:
    
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${data.main.temp}¬∞C
–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: ${data.main.feels_like}¬∞C
–ü–æ–≥–æ–¥–∞: ${data.weather[0].description}
–í–æ–ª–æ–≥—ñ—Å—Ç—å: ${data.main.humidity}%
–í—ñ—Ç–µ—Ä: ${data.wind.speed} –º/—Å`;
};

// 5-–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (–≤–∫–ª—é—á–∞—é—á–∏ —Å—å–æ–≥–æ–¥–Ω—ñ)
export const getFiveDayWeather = async (city) => {
    const apiKey = process.env.OPENWEATHER_API_KEY;
    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(
        city
    )}&appid=${apiKey}&units=metric&lang=ua`;

    const response = await fetch(url);
    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –ø—Ä–æ–≥–Ω–æ–∑—É");
    }

    const data = await response.json();

    // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –¥–∞—Ç–∞—Ö
    const daysMap = {};
    data.list.forEach(item => {
        const date = new Date(item.dt * 1000).toLocaleDateString("uk-UA");
        if (!daysMap[date]) daysMap[date] = [];
        daysMap[date].push(item);
    });

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –¥–∞—Ç–∏
    const sortedDays = Object.entries(daysMap).sort((a, b) =>
        new Date(a[0]) - new Date(b[0])
    );

    // –ó–∞–≤–∂–¥–∏ –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –¥–µ–Ω—å (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –∑–∞–ø–∏—Å—ñ–≤ < 8)
    const resultDays = [sortedDays[0]];

    // –ü–æ—Ç—ñ–º –¥–æ–¥–∞—î–º–æ —â–µ 5 –ø–æ–≤–Ω–∏—Ö –¥–Ω—ñ–≤ (8 –∑–∞–ø–∏—Å—ñ–≤)
    for (let i = 1; i < sortedDays.length && resultDays.length < 6; i++) {
        const [_, items] = sortedDays[i];
        if (items.length === 8) {
            resultDays.push(sortedDays[i]);
        }
    }

    let reply = `üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è ${data.city.name}:\n\n`;

    for (const [date, items] of resultDays) {
        const temps = items.map(i => i.main.temp);
        const humidities = items.map(i => i.main.humidity);
        const weatherDescriptions = items.map(i => i.weather[0].description);

        const minTemp = Math.min(...temps).toFixed(1);
        const maxTemp = Math.max(...temps).toFixed(1);
        const avgHumidity = Math.round(humidities.reduce((a, b) => a + b, 0) / humidities.length);

        const freqDesc = weatherDescriptions.sort((a, b) =>
            weatherDescriptions.filter(v => v === a).length - weatherDescriptions.filter(v => v === b).length
        ).pop();

        const incompleteNote = items.length < 8 ? " (–Ω–µ–ø–æ–≤–Ω–∏–π –¥–µ–Ω—å)" : "";

        reply += `${date}: ${freqDesc}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ñ–¥ ${minTemp}¬∞C –¥–æ ${maxTemp}¬∞C, –≤–æ–ª–æ–≥—ñ—Å—Ç—å: ${avgHumidity}%${incompleteNote}\n`;
    }

    return reply;
};

// –ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (3 –≥–æ–¥–∏–Ω–∏)
export const getHourlyWeather = async (city) => {
    const apiKey = process.env.OPENWEATHER_API_KEY;
    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(
        city
    )}&appid=${apiKey}&units=metric&lang=ua`;

    const response = await fetch(url);
    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –ø—Ä–æ–≥–Ω–æ–∑—É");
    }

    const data = await response.json();

    let reply = `üïí –ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (3 –≥–æ–¥–∏–Ω–∏) –¥–ª—è ${data.city.name}:\n\n`;

    // –ü–µ—Ä—à—ñ 8 –∑–∞–ø–∏—Å—ñ–≤ = 24 –≥–æ–¥–∏–Ω–∏ (3 –≥–æ–¥–∏–Ω–∏ –∫—Ä–æ–∫)
    data.list.slice(0, 8).forEach((item) => {
        const time = new Date(item.dt * 1000).toLocaleTimeString("uk-UA", {
            hour: "2-digit",
            minute: "2-digit",
        });
        reply += `${time}: ${item.weather[0].description}, —Ç–µ–º–ø: ${item.main.temp}¬∞C\n`;
    });

    return reply;
};