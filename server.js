import dotenv from "dotenv";
import { Telegraf, Markup, session } from "telegraf";
import OpenAI from "openai";
import { getHourlyWeather, getTodayWeather, getFiveDayWeather } from "./weatherService.js";

dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
bot.use(session());

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

// –°—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é
bot.start((ctx) => {
    ctx.session = {};
    ctx.reply(
        '–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç "–ú–µ—Ç–µ–æ—Ä–æ–ª–æ–≥—ñ—á–Ω–∞ —Å—Ç–∞–Ω—Ü—ñ—è", —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –∞–∫—Ç—É–∞–ª—å–Ω—É –ø–æ–≥–æ–¥—É. –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å.',
        Markup.keyboard([
            ["üå¶ –ü–æ–≥–æ–¥–∞", "üß† –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–æ GPT"],
        ])
            .resize()
            .oneTime()
    );
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É "–ü–æ–≥–æ–¥–∞" –∞–±–æ "GPT"
bot.hears("üå¶ –ü–æ–≥–æ–¥–∞", (ctx) => {
    ctx.session.awaitingCity = false;
    ctx.reply(
        "–û–∫–µ–π! –û–±–µ—Ä–∏ –≤–∏–¥ –ø—Ä–æ–≥–Ω–æ–∑—É.",
        Markup.keyboard([
            ["–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"],
            ["–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤"],
            ["–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (3 –≥–æ–¥–∏–Ω–∏)"],
        ])
            .resize()
            .oneTime()
    );
});

bot.hears("üß† –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–æ GPT", (ctx) => {
    ctx.session.awaitingGptQuestion = true;
    ctx.reply("–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–æ –®–Ü.");
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É ‚Äî –≤–≤–∞–∂–∞—î–º–æ, —â–æ —Ü–µ –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞
bot.on("text", async (ctx) => {
    const userText = ctx.message.text.trim();

    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è GPT
    if (ctx.session.awaitingGptQuestion) {
        ctx.session.awaitingGptQuestion = false;

        try {
            const completion = await openai.chat.completions.create({
                model: "gpt-4o-mini",
                messages: [{ role: "user", content: userText }],
            });

            const gptReply = completion.choices[0].message.content;
            ctx.reply(`üß† GPT –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î:\n\n${gptReply}`);
        } catch (err) {
            console.error("‚ùå GPT-–ø–æ–º–∏–ª–∫–∞:", err);
            ctx.reply("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.");
        }

        return;
    }

    // –Ø–∫—â–æ –æ—á—ñ–∫—É—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –ø—Ä–æ–≥–Ω–æ–∑—É
    if (ctx.session.forecastType) {
        if (["–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤", "–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (3 –≥–æ–¥–∏–Ω–∏)"].includes(userText)) {
            return;
        }

        try {
            let reply = "";

            switch (ctx.session.forecastType) {
                case "–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ":
                    reply = await getTodayWeather(userText);
                    break;
                case "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤":
                    reply = await getFiveDayWeather(userText);
                    break;
                case "–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (3 –≥–æ–¥–∏–Ω–∏)":
                    reply = await getHourlyWeather(userText);
                    break;
            }

            ctx.session.weatherInfo = reply;

            await ctx.reply(reply, Markup.inlineKeyboard([
                Markup.button.callback("ü§ñ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ä–∞–¥—É –≤—ñ–¥ –®–Ü", "GET_ADVICE")
            ]));

            ctx.session.forecastType = null;

            ctx.reply("–©–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?", Markup.keyboard([
                ["üå¶ –ü–æ–≥–æ–¥–∞", "üß† –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–æ GPT"],
            ]).resize());
        } catch (err) {
            console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞:", err.message);
            if (
                err.message.includes("city not found") ||
                err.message.includes("Nothing to geocode")
            ) {
                ctx.reply(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ç–æ "${userText}". –ü–µ—Ä–µ–≤—ñ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–∑–≤—É.`);
                return;
            }

            if (err.message.includes("Invalid API key")) {
                ctx.reply("‚ùóÔ∏è API –∫–ª—é—á –¥–æ OpenWeatherMap –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.");
                return;
            }

            ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.");
        }

        return;
    }

    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑—É ‚Äî –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –º—ñ—Å—Ç–æ
    if (["–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤", "–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (3 –≥–æ–¥–∏–Ω–∏)"].includes(userText)) {
        ctx.session.forecastType = userText;
        ctx.reply("–ù–∞–ø–∏—à–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞.");
        return;
    }

    // –ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    ctx.reply("–í–∏–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.");
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ—Ä–∞–¥–∏ –≤—ñ–¥ AI
bot.action("GET_ADVICE", async (ctx) => {
    await ctx.answerCbQuery();

    if (!ctx.session.weatherInfo) {
        ctx.reply("–ù–∞ –∂–∞–ª—å, –Ω–µ –º–æ–∂—É –¥–∞—Ç–∏ –ø–æ—Ä–∞–¥—É ‚Äî —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–∏—Ç–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏.");
        return;
    }

    const prompt = `–î–∞–π –∫–æ—Ä–∏—Å–Ω—É –ø–æ—Ä–∞–¥—É –ª—é–¥–∏–Ω—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ü—å–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é:\n\n${ctx.session.weatherInfo}`;

    try {
        const completion = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [{ role: "user", content: prompt }],
        });

        const advice = completion.choices[0].message.content;
        ctx.reply(`üí° –ü–æ—Ä–∞–¥–∞:\n\n${advice}`);
    } catch (err) {
        console.error("‚ùå GPT-–ø–æ–º–∏–ª–∫–∞:", err);
        ctx.reply("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.");
    }
});

bot.launch();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...");