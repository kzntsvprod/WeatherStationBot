import dotenv from "dotenv";
import { Telegraf } from "telegraf";
import OpenAI from "openai";

dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

bot.start((ctx) => {
    ctx.reply("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ —â–æ—Å—å, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é GPT.");
});

bot.on("text", async (ctx) => {
    try {
        const completion = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [{ role: "user", content: ctx.message.text }],
        });

        const reply = completion.choices[0].message.content;
        ctx.reply(reply);

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ API:", error);

        if (error.code === "insufficient_quota" || error.status === 429) {
            ctx.reply(
                "–í–∏–±–∞—á, –Ω–∞—Ä–∞–∑—ñ –≤–∏—á–µ—Ä–ø–∞–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ —Å–µ—Ä–≤—ñ—Å—É. –°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            );
        } else {
            ctx.reply("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.");
        }
    }
});

bot.launch();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...");