import dotenv from "dotenv";
import { Telegraf, Markup, session } from "telegraf";
import OpenAI from "openai";
import { getHourlyWeather, getTodayWeather, getFiveDayWeather } from "./weatherService.js";

dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
bot.use(session());

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

// –°—Ç–∞—Ä—Ç –∑ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –≤–∏–¥—É –ø—Ä–æ–≥–Ω–æ–∑—É
bot.start((ctx) => {
    ctx.session = {};
    ctx.reply(
        '–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç "–ú–µ—Ç–µ–æ—Ä–æ–ª–æ–≥—ñ—á–Ω–∞ —Å—Ç–∞–Ω—Ü—ñ—è", —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –∞–∫—Ç—É–∞–ª—å–Ω—É –ø–æ–≥–æ–¥—É. –û–±–µ—Ä–∏ –≤–∏–¥ –ø—Ä–æ–≥–Ω–æ–∑—É.',
        Markup.keyboard([
            ["–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"],
            ["–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤"],
            ["–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (3 –≥–æ–¥–∏–Ω–∏)"],
        ])
            .resize()
            .oneTime()
    );
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤–∏–¥—É –ø—Ä–æ–≥–Ω–æ–∑—É
bot.hears(["–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤", "–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (3 –≥–æ–¥–∏–Ω–∏)"], (ctx) => {
    ctx.session.forecastType = ctx.message.text;
    ctx.reply("–ù–∞–ø–∏—à–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞");
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É ‚Äî –≤–≤–∞–∂–∞—î–º–æ, —â–æ —Ü–µ –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞
bot.on("text", async (ctx) => {
    const userText = ctx.message.text.trim();

    if (!ctx.session.forecastType) {
        ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ –≤–∏–¥ –ø—Ä–æ–≥–Ω–æ–∑—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.");
        return;
    }

    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–ø–∞–¥–∫–æ–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É, –Ω–µ –æ–±—Ä–æ–±–ª—è—î–º–æ
    if (["–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤", "–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (3 –≥–æ–¥–∏–Ω–∏)"].includes(userText)) {
        return;
    }

    try {
        let reply = "";

        switch (ctx.session.forecastType) {
            case "–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ":
                reply = await getTodayWeather(userText);
                break;
            case "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤":
                reply = await getFiveDayWeather(userText);
                break;
            case "–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (3 –≥–æ–¥–∏–Ω–∏)":
                reply = await getHourlyWeather(userText);
                break;
            default:
                reply = "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑—É.";
        }

        ctx.reply(reply);

        // –°–∫–∏–¥–∞—î–º–æ –≤–∏–±—ñ—Ä –≤–∏–¥—É –ø—Ä–æ–≥–Ω–æ–∑—É, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –æ–±—Ä–∞—Ç–∏ –∑–Ω–æ–≤—É
        ctx.session.forecastType = null;

        ctx.reply(
            "–©–æ —Ö–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —â–µ?",
            Markup.keyboard([
                ["–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"],
                ["–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤"],
                ["–ü–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (3 –≥–æ–¥–∏–Ω–∏)"],
            ])
                .resize()
                .oneTime()
        );

    } catch (err) {
        console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞:", err.message);

        if (
            err.message.includes("city not found") ||
            err.message.includes("Nothing to geocode")
        ) {
            ctx.reply(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ç–æ "${userText}". –ü–µ—Ä–µ–≤—ñ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–∑–≤—É.`);
            return;
        }

        if (err.message.includes("Invalid API key")) {
            ctx.reply("‚ùóÔ∏è API –∫–ª—é—á –¥–æ OpenWeatherMap –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.");
            return;
        }

        try {
            const completion = await openai.chat.completions.create({
                model: "gpt-4o-mini",
                messages: [{ role: "user", content: userText }],
            });

            const gptReply = completion.choices[0].message.content;
            ctx.reply(gptReply);
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ GPT:", error);
            ctx.reply("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.");
        }
    }
});

bot.launch();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...");